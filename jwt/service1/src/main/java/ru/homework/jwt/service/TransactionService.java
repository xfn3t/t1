package ru.homework.jwt.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.homework.jwt.common.AccountStatus;
import ru.homework.jwt.common.ClientStatus;
import ru.homework.jwt.common.TransactionStatus;
import ru.homework.jwt.dto.TransactionAcceptMessage;
import ru.homework.jwt.dto.TransactionResultMessage;
import ru.homework.jwt.dto.request.TransactionRequestDto;
import ru.homework.jwt.dto.response.TransactionResponseDto;
import ru.homework.jwt.mapper.TransactionMapper;
import ru.homework.jwt.model.transaction.Transaction;
import ru.homework.jwt.model.user.Account;
import ru.homework.jwt.repository.AccountRepository;
import ru.homework.jwt.repository.TransactionRepository;
import ru.homework.jwt.service.clients.BlacklistClient;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class TransactionService {

    private final BlacklistClient blacklist;
    private final AccountRepository accountRepo;
    private final TransactionRepository txRepo;
    private final KafkaTemplate<String, TransactionAcceptMessage> acceptTpl;
    private final TransactionMapper txMapper;

    @Value("${transactions.reject.threshold}")
    private int rejectThreshold;

    @Transactional
    public TransactionResponseDto ingest(TransactionRequestDto dto) {
        Account acct = accountRepo.findByAccountId(dto.getAccountId())
                .orElseThrow(() -> new RuntimeException("Account not found"));

        String clientId = acct.getClient().getClientId().toString();
        ClientStatus clientStatus = blacklist.getStatus(clientId).getStatus();

        // 1) –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ ‚Äî –≤—ã—Å—Ç–∞–≤–ª—è–µ–º REJECTED –∏–ª–∏ ARRESTED
        if (clientStatus == ClientStatus.BLACKLISTED) {
            return handleBlacklistedClient(acct, dto, clientId);
        }

        // 2) –ö–ª–∏–µ–Ω—Ç OK ‚Äî —Å–æ–∑–¥–∞—ë–º REQUESTED –∏ —à–ª—ë–º –≤ Kafka
        return handleRegularTransaction(acct, dto, clientId);
    }

    private TransactionResponseDto handleBlacklistedClient(Account acct, TransactionRequestDto dto, String clientId) {
        // –ü–æ–¥—Å—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –î–û —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π
        long rejectedCount = txRepo.countByAccountAndStatus(acct, TransactionStatus.REJECTED);

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        Transaction tx = Transaction.builder()
                .transactionId(UUID.randomUUID().toString())
                .status(TransactionStatus.REJECTED)
                .timestamp(LocalDateTime.now())
                .amount(dto.getAmount())
                .account(acct)
                .build();
        txRepo.save(tx);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω
        if (acct.getStatus() != AccountStatus.ARRESTED) {
            AccountStatus newStatus;

            if (rejectedCount >= rejectThreshold - 1) {  // -1 –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â–µ –Ω–µ —É—á—Ç–µ–Ω–∞
                newStatus = AccountStatus.ARRESTED;
                log.info("üîí Arresting account {} (rejected transactions: {}/{})",
                        acct.getAccountId(), rejectedCount + 1, rejectThreshold);
            } else {
                newStatus = AccountStatus.BLOCKED;
                log.info("‚õî Blocking account {} (rejected transactions: {}/{})",
                        acct.getAccountId(), rejectedCount + 1, rejectThreshold);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (acct.getStatus() != newStatus) {
                acct.setStatus(newStatus);
                accountRepo.save(acct);
            }
        }

        return toResponse(tx, clientId);
    }

    private TransactionResponseDto handleRegularTransaction(Account acct, TransactionRequestDto dto, String clientId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤
        if (acct.getBalance().compareTo(dto.getAmount()) < 0) {
            log.warn("‚ùå Insufficient funds for account {}", acct.getAccountId());
            throw new RuntimeException("Insufficient funds");
        }

        Transaction tx = Transaction.builder()
                .transactionId(UUID.randomUUID().toString())
                .status(TransactionStatus.REQUESTED)
                .timestamp(LocalDateTime.now())
                .amount(dto.getAmount())
                .account(acct)
                .build();
        txRepo.save(tx);

        // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å—Ä–∞–∑—É
        acct.setBalance(acct.getBalance().subtract(dto.getAmount()));
        accountRepo.save(acct);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Kafka –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        acceptTpl.send("t1_demo_transaction_accept",
                new TransactionAcceptMessage(
                        UUID.fromString(clientId),
                        dto.getAccountId(),
                        tx.getTransactionId(),
                        tx.getTimestamp(),
                        tx.getAmount(),
                        acct.getBalance()
                )
        );

        return toResponse(tx, clientId);
    }

    @Transactional
    public void applyResult(TransactionResultMessage msg) {
        txRepo.findByTransactionId(msg.getTransactionId())
                .ifPresent(tx -> {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    tx.setStatus(msg.getStatus());

                    Account acc = tx.getAccount();
                    boolean needSave = false;

                    switch (msg.getStatus()) {
                        case REJECTED:
                            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                            acc.setBalance(acc.getBalance().add(tx.getAmount()));
                            needSave = true;
                            log.info("üîÑ Funds returned for transaction {}", tx.getTransactionId());
                            break;

                        case BLOCKED:
                            acc.setStatus(AccountStatus.BLOCKED);
                            // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
                            acc.setFrozenAmount(acc.getFrozenAmount().add(tx.getAmount()));
                            needSave = true;
                            log.warn("‚õî Account {} blocked", acc.getAccountId());
                            break;

                        case ACCEPTED:
                            // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
                            if (acc.getStatus() == AccountStatus.BLOCKED) {
                                acc.setStatus(AccountStatus.OPEN);
                                needSave = true;
                            }
                            log.info("‚úÖ Transaction {} accepted", tx.getTransactionId());
                            break;

                        // –î–ª—è CANCELLED –∏ REQUESTED –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å—á–µ—Ç–æ–º
                        default:
                            log.debug("No account state change for status: {}", msg.getStatus());
                            break;
                    }

                    if (needSave) {
                        accountRepo.save(acc);
                    }
                    txRepo.save(tx);
                });
    }

    private TransactionResponseDto toResponse(Transaction tx, String clientId) {
        return new TransactionResponseDto(
                UUID.fromString(clientId),
                tx.getAccount().getAccountId(),
                tx.getTransactionId(),
                tx.getTimestamp(),
                tx.getAmount(),
                tx.getStatus()
        );
    }

    public TransactionResponseDto getById(String txId) {
        return txRepo.findByTransactionId(txId)
                .map(txMapper::toDto)
                .orElseThrow(() -> new RuntimeException("Transaction not found"));
    }

    public List<TransactionResponseDto> getByAccount(String accountId) {
        return txRepo.findByAccount_AccountIdOrderByTimestampDesc(accountId)
                .stream()
                .map(txMapper::toDto)
                .collect(Collectors.toList());
    }
}