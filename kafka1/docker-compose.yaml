version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: kafka-example-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka-example-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1


  db:
    image: postgres:15
    container_name: kafka-example-db
    environment:
      POSTGRES_DB: kafka_example
      POSTGRES_USER: kafkaUser
      POSTGRES_PASSWORD: kafkaPassword
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kafkaUser -d kafka_example"]
      interval: 10s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka-example-app
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_started
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/kafka_example
      SPRING_DATASOURCE_USERNAME: kafkaUser
      SPRING_DATASOURCE_PASSWORD: kafkaPassword
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      METRICS_TIME_LIMIT_MS: 500
      CACHE_DEFAULT_TTL_SECONDS: 60
    ports:
      - "8080:8080"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  db_data:
